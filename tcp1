
if (ippacket->ip_p == IP_TCP) {
  sr_tcp_hdr_t *tcphdr= (sr_tcp_hdr_t *) (ippacket + sizeof(sr_ip_hdr_t));

          if(strcmp(interface, "eth1") == 0) { /*outbound*/
            
            /*destination is me */ 
            if (find_interface(sr,ippacket->ip_dst)) {  
              fprintf(stderr, "port unreachable");
              send_icmp_t3t11(sr, (uint8_t *) ippacket, len, 3, 3);
            
            /*receive on eth1 but destination is not me: reach server or others outside NAT*/ /*OR it want to be routed within NAT */
            }else{
            
              struct sr_rt *next_rt = rt_lpm(sr, ippacket->ip_dst); 
              if(!next_rt){
                 fprintf(stderr, "something went wrong! could not find interface for echo reply\n");
                 return;
              }
              struct sr_if* nxiface = sr_get_interface(sr, next_rt->interface);
              if(!nxiface){fprintf(stderr, "somethign went wrong! couldnt find iface for echo reply\n"); return;}
              
              if(strcmp(nxiface->name, "eth1") == 0){ /*no attempt to get out NAT, we dont need to modify it and just forward it*/
                if ((ippacket->ip_ttl -= 1) <= 0) { 
                  send_icmp_t3t11(sr, (uint8_t*) ippacket, len, 11, 0); return;
                
                }else{
                  ippacket->ip_sum = 0;
                  ippacket->ip_sum = cksum(ippacket, sizeof(sr_ip_hdr_t)); /*since ttl--, so recompute checksum*/
                  send_ip_packet(sr,ippacket,len); /*here we don't need to recompute tcp cksum right? coz we didn't change tcp header & data*/
                }
              
              }else if (strcmp(nxiface->name, "eth2") == 0){
              
                  sr_nat_mapping_t *mapresult = sr_nat_lookup_internal(&(sr->nat), ippacket->ip_src, ntohs(tcphdr->port_src), nat_mapping_tcp);
                  if (mapresult == NULL) { /*cannot find the mapping, need to insert*/
                      mapresult = sr_nat_insert_mapping(&(sr->nat), ippacket->ip_src, ntohs(tcphdr->port_src), nat_mapping_tcp);
                      mapresult->ip_ext = (sr_get_interface(sr, nxiface->name))->ip;
                  }
                  /*mapresult->last_updated = time(NULL);*/
                  
                  /*here we need to use the router's lock*/
                  pthread_mutex_lock(&((sr->nat).lock));
                  
             
                  struct sr_nat_connection *tcpcon = sr_nat_lookup_con(mapresult, ippacket->ip_dst); /*in lookup_con(),there's no last_updated = time(NULL), dk if we should add it */
                  
                   if (tcpcon == NULL) {
                    tcpcon = sr_nat_insert_con(mapresult, ippacket->ip_dst);
                    }
                   tcpcon->last_updated = time(NULL);
                   
                   switch (tcpcon->state) {
                   
                     case CLOSED: 
                       if (ntohl(tcphdr->ack_num) == 0 && tcphdr->syn && !tcphdr->ack) {
                         tcpcon->client_isn = ntohl(tcphdr->seq_num);
                         tcpcon->state = SYN_SENT;
                       }
                     break;

                     case SYN_RECEIVED: 
                       if (ntohl(tcphdr->seq_num) == tcpcon->client_isn + 1 && ntohl(tcphdr->ack_num) == tcpcon->server_isn + 1 && !tcphdr->syn) { 
                       
                         tcpcon->client_isn = ntohl(tcphdr->seq_num);
                         tcpcon->state = ESTABLISHED;
                      }
                     break;

                     case ESTABLISHED:
                      if (tcphdr->fin && tcphdr->ack) {
                         tcpcon->client_isn = ntohl(tcphdr->seq_num);
                         tcpcon->state = CLOSED;
                      }
                     break;

                     default:
                      break;
                  
                  }

            pthread_mutex_unlock(&((sr->nat).lock));
            /* End of router's lock. */
            
            nat_handle_outbound_tcp(sr, mapresult, ippacket,  len);
            free(mapresult);
            free(ippacket);
            }
         }   
      }

          
