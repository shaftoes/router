if (nat_enabled){    
    if (ippacket->ip_p == IP_ICMP){
        if(interface == "eth1") { //????? 
            if (find_interface(sr,ippacket->ip_dst)) {  /*destination is me */ 
                fprintf(stderr, "ICMP request!\n");
                handle_ip_icmp(sr, (uint8_t *) ippacket);
            }
            else{ /*receive on eth1 but destination is not me: ping server or others outside NAT*/ /*OR it want to be routed within NAT */
                struct sr_rt *next_rt = rt_lpm(sr, ippacket->ip_dst); 
                if(!next_rt){
                   fprintf(stderr, "something went wrong! could not find interface for echo reply\n");
                   return;
                }
                struct sr_if* nxiface = sr_get_interface(sr, next_rt->interface);
                if(!nxiface){fprintf(stderr, "somethign went wrong! couldnt find iface for echo reply\n"); return;}
                if(nxiface->ip == sr_get_interface(sr, "eth1")->ip){ /*no attempt to get out NAT, we dont need to modify it and just forward it*/
                    if ((ippacket->ip_ttl -= 1) <= 0) { send_icmp_t3t11(sr, (uint8_t*) ippacket, len, 11, 0); return;}
                    else{
                    ippacket->ip_sum = 0;
                    ippacket->ip_sum = cksum(ippacket, sizeof(sr_ip_hdr_t)); /*since ttl--, so recompute checksum*/
                    send_ip_packet(sr,ippacket,len);
                    free(ippacket);}
                else if (nxiface->ip == sr_get_interface(sr, "eth2")->ip){
                sr_icmp_hdr_t* icmp_hder = (sr_icmp_hdr_t *) (ippacket + sizeof(sr_ip_hdr_t));
                /*if(icmp_hder->icmp_type == 8 || icmp_hder->icmp_type == 0){ /*echo reply or echo request to be sent out */
                    struct sr_nat_mapping *mapresult = *sr_nat_lookup_internal(&(sr->nat), ippacket->ip_src, icmp_hder->icmp_id, nat_mapping_icmp);/*i added icmp_id to struct icmp_hdr*/
                    if (mapresult == NULL) { /*cannot find the mapping, need to insert*/
                        mapresult = *sr_nat_insert_mapping(&(sr->nat), ippacket->ip_src, icmp_hder->icmp_id, nat_mapping_icmp);
                    }
                    mapresult->last_updated = time(NULL);
                    nat_handle_outbound_icmp(sr, mapresult, ippacket, len);
                    free(mapresult);
                }
            }
        }
           
        else if(interface == "eth2") { /*inbound packet*/ /*NOT SURE USAGE HERE*/
            if (!find_interface(sr,ippacket->ip_dst)) {  /*destination is not me*/
                /*we do longest match to find the outgoing interface*/
                struct sr_rt *next_rt = rt_lpm(sr, ippacket->ip_dst); 
                if(!next_rt){
                   fprintf(stderr, "something went wrong! could not find interface for echo reply\n");
                   return;
                }
                struct sr_if* nxiface = sr_get_interface(sr, next_rt->interface);
                if(!nxiface){fprintf(stderr, "somethign went wrong! couldnt find iface for echo reply\n"); return;}
                if(nxiface->ip == sr_get_interface(sr, "eth2")->ip) /*no attempt to get into NAT, wedont need to modify it and just forward it*/
                    if ((ippacket->ip_ttl -= 1) <= 0) { send_icmp_t3t11(sr, (uint8_t*) ippacket, len, 11, 0); return;}
                    else{
                    ippacket->ip_sum = 0;
                    ippacket->ip_sum = cksum(ippacket, sizeof(sr_ip_hdr_t));
                    send_ip_packet(sr,ippacket,len);
                    free(ippacket);}
                else{ 
                    fprintf(stderr,"Unsolicid inbound ICMP packet received attempting to send to internal IP. Drop it");
                    /*do we need to sent some icmp unreachable here????*/
                    return;
                }
            }
            
            else { /*inbound packet & destination is me*/
                //struct sr_if* inface = sr_get_interface(sr, interface); /*first we need to find which interface is the dest.ip */
                //if(!inface){fprintf(stderr, "somethign went wrong! couldnt find iface for echo reply\n"); return;}
                
                if(ippacket->ip_dst == sr_get_interface(sr, "eth1")->ip) { /*cannot happen *bad attempt to get into NAT*/ /*NOT SURE usage correct or not*/
                    fprintf(stderr,"Unsolicid inbound ICMP packet received attempting to send to internal IP. Drop it");
                    /*do we need to sent some icmp unreachable here????*/
                    return;}
                else {/*dest.ip is eth2*/
                     /*echo request/reply attempting to send in NAT*/
                        struct sr_nat_mapping *mapresult = *sr_nat_lookup_external(&(sr->nat), icmp_hder->icmp_id, nat_mapping_icmp);
                        if (mapresult) { /*we can find the mapping of this ip,port pair (already existed)*/
                            fprintf(stderr,"got the mapping associated with this pair");
                            /*then, we need to modify this packet's header using this mapping*/
                            mapresult->last_updated = time(NULL); /*correct????*/
                            nat_handle_inbound_icmp(sr, mapresult, ippacket, len);
                            free(mapresult);
                        }
                        else { /*cannot find the mapping, */
                            if(icmp_hder->icmp_type == 0){ /*reply*/
                                fprintf(stderr,"since router wouldn't ping others, there shouldn't be echo reply to router itself.we should drop it");
                                return;
                            }
                            if(icmp_hder->icmp_type == 8){ /*request,couldn't find mapping,so assume sth outside nat is pinging eth2*/ 
                                handle_ip_icmp(sr, (uint8_t *) ippacket); /*we just send an echo reply back*/
                            }
                        }
                    } 
                }
            }
    }
}


 void nat_handle_outbound_icmp(struct sr_instance* sr, struct sr_nat_mapping* natmap, uint8_t* ip_packet, uint16_t len){
     sr_ip_hdr_t* ip_header = (sr_ip_hdr_t*) ip_packet;
     sr_icmp_hdr_t* icmp_hdr = (sr_icmp_hdr_t *) (ip_packet + sizeof(sr_ip_hdr_t));
     ip_header->ip_src = natmap->ip_ext;
     icmp_hdr->icmp_id = natmap->aux_ext;
     /* first,ttl-1;  then checksum??*/
     icmp_hdr->icmp_sum = 0;
     icmp_hdr->icmp_sum = icmp_cksum(icmp_hdr, (len - sizeof(sr_ip_hdr_t))); /*should we use sizeof(icmp_hdr) OR len-sizeof(ip_hdr)*/
     if ((ip_header->ip_ttl -= 1) <= 0) {  
            send_icmp_t3t11(sr, (uint8_t*) ip_header, len, 11, 0);
            return;
        }
     else{
            ip_header->ip_sum = 0;
            ip_header->ip_sum = cksum(ip_header, sizeof(sr_ip_hdr_t));
            send_ip_packet(sr,(uint8_t *) ip_header, len);
        }
     free(ip_packet);
 } 
                
 
 void nat_handle_inbound_icmp(struct sr_instance* sr, struct sr_nat_mapping* natmap, uint8_t* ip_packet, uint16_t len){
                    /*if it is request to sth inside nat,we modify the header using mapping and forward it*/
                    /*if it is reply to sth inside nat,we also modify header and forward it*/
     sr_ip_hdr_t* ip_header = (sr_ip_hdr_t*) ip_packet;
     sr_icmp_hdr_t* icmp_hdr = (sr_icmp_hdr_t *) (ip_packet + sizeof(sr_ip_hdr_t));
     ip_header->ip_dst = natmap->ip_int;
     icmp_hdr->icmp_id = natmap->aux_int;
     /* first,ttl-1;  then checksum??*/
     icmp_hdr->icmp_sum = 0;
     icmp_hdr->icmp_sum = icmp_cksum(icmp_hdr, (len - sizeof(sr_ip_hdr_t))); /*should we use sizeof(icmp_hdr) OR len-sizeof(ip_hdr)*/
     if ((ip_header->ip_ttl -= 1) <= 0) {  
            send_icmp_t3t11(sr, (uint8_t*) ip_header, len, 11, 0);
            return;
        }
     else{
            ip_header->ip_sum = 0;
            ip_header->ip_sum = cksum(ip_header, sizeof(sr_ip_hdr_t));
            send_ip_packet(sr, (uint8_t *) ip_header, len);
        }
     free(ip_packet);
 }
